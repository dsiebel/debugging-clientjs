{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww8380\viewh11480\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\b\fs26 \cf0 error.html
\b0\fs24 \
- plain javascript\
- printProps: rekursiv alle properties eines Objekt ausgeben\
\
1. plain Error object (unthrown)\
	compare stacktraces: Firefox, Chrome, IE\
2. thrown Error\
	compare stacktraces: Firefox, Chrome, IE\
\

\b\fs26 onerror.html
\fs24 \

\b0 1. no stacktrace in window.onerror\
	compare: Firefox, IE, Chrome\
	good/sad: 15 years of Browser development!\
Where does the error get los? => larger example\
\

\b\fs26 sync.html
\b0\fs24 \
1. \'93real world\'94 Beispiel (Firefox)\
	Fehler auf tiefster Ebene\
	printProps auf jeder Ebene der Ausf\'fchrungskette\
	Fehler fehlt erst bei window.onerror\
	\
2. Stacktraces sehen gar nichtmal so geil aus (Firefox)\
	anonyme Funktionen benennen\
	Prefix / Suffix => identifiziert anon. + IE sicher (manche Versionen)\
\
\

\b\fs26 async.html
\b0\fs24 \
1. Gleiches Beispiel wie zuvor (Firefox)\
	dieses mal addEventListener / setTimeout\
	globaler Error handler (TRY/CATCH ALL THE THINGS)\
\
L\'f6sungsm\'f6glichkeiten:\
	try catch in allen callbacks\
	monkey patching von host Funktionen\
	(ich) Keine \'93elegante\'94 L\'f6sung bis jetzt (vlt.mit Zones / zone.js)\
		=> vielleicht in der n\'e4chsten Version des Talks\
}